---
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';

export interface Props {
  title: string;
  description?: string;
  isHome?: boolean;
}

const { 
  title, 
  description = "Premium workspace essentials designed for the modern professional.",
  isHome = false
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body class="font-sans bg-editorial text-warm-gray-900">
    
    <Header />
    
    <main>
      <slot />
    </main>
    
    <Footer />

    <script>
      // Mobile menu functionality
      const mobileMenuButton = document.getElementById('mobile-menu-button');
      const closeMenuButton = document.getElementById('close-mobile-menu');
      const mobileMenu = document.getElementById('mobile-menu');
      const mobileMenuContent = mobileMenu?.querySelector('div:last-child');
      
      function openMobileMenu() {
        document.body.style.overflow = 'hidden';
        mobileMenu?.classList.remove('translate-x-full');
        if (mobileMenuContent) {
          setTimeout(() => {
            mobileMenuContent.classList.remove('translate-x-full');
          }, 100);
        }
      }
      
      function closeMobileMenu() {
        if (mobileMenuContent) {
          mobileMenuContent.classList.add('translate-x-full');
          setTimeout(() => {
            mobileMenu?.classList.add('translate-x-full');
            document.body.style.overflow = '';
          }, 300);
        }
      }

      mobileMenuButton?.addEventListener('click', openMobileMenu);
      closeMenuButton?.addEventListener('click', closeMobileMenu);
      
      // Close menu when clicking outside
      mobileMenu?.addEventListener('click', (e) => {
        if (e.target === mobileMenu) {
          closeMobileMenu();
        }
      });
    </script>
  </body>
</html>